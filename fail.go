/*
Package fail introduces a compact, fluent interface to handle failing tests
*/
package fail

import "testing"

const (
	testReporterWithFormat    = "Test failed\ngot:\t%v\nwant:\t%v\n%s"
	testReporterBecauseFormat = "Test failed\nreason: %s"
)

// TestReporter is an interface for test reports generated by fail
type TestReporter interface {
	With(interface{}, interface{})
	Because(string)
}

// TestFailure represents a test failure reports
type TestFailure struct {
	test *testing.T
}

// With produces a test failure report comparing got to want
func (failure *TestFailure) With(got interface{}, want interface{}) {
	failure.test.Errorf(testReporterWithFormat, got, want, "Moving forward")
}

// Because produces a test failure report mentioning reason
func (failure *TestFailure) Because(reason string) {
	failure.test.Errorf(testReporterBecauseFormat, reason)
}

// TestTermination represents a test termination report
type TestTermination struct {
	test *testing.T
}

// With produces a test termination report comparing got to want
func (termination *TestTermination) With(got interface{}, want interface{}) {
	termination.test.Fatalf(testReporterWithFormat, got, want, "Terminating execution")
}

// Because produces a test termination report mentioning reason
func (termination *TestTermination) Because(reason string) {
	termination.test.Fatalf(testReporterBecauseFormat, reason)
}

// During creates a test failure report which won't stop the test execution
func During(test *testing.T) TestReporter {
	return &TestFailure{test: test}
}

// Stop creates a test termination report which will stop the test execution
func Stop(test *testing.T) TestReporter {
	return &TestTermination{test: test}
}
